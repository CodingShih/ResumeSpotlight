上動態調整版本對抗原版本 NCTU6 勝率達 59.66%。再使用提升的走
步順序品質，對抗前述改良的版本勝率達 58.95%。並且 NCTU6 能找
出圖  1(b)的理想棋步做為推薦下法。而再使用 JL-PNS 並且搭配分數
轉狀態、活五處理方法，使我們能找到某些問題盤面的理想棋步，並
且也發現對於解題能力有所提升。 
此篇論文的第 2 節，會介紹先前研究，包含六子棋以及先前用於
NCTU6 的相關技術如迫著空間搜尋、相關區域以及 Alpha-beta 搜尋
等。第 3 節為方法，討論 NCTU6 與 JL-PNS 目前的弱點，並且提出
解決之道。第 4 節為實驗，分析我們提出的方法是否有增加程式的強
度。第 5 節為結論以及未來展望。 
(a)                                            (b) 
圖  1: Little Golem 比賽中，我方(白)著手不佳之一盤面  (a)程式的棋步；(b)理想
棋步。 
3 
II.  背景介紹 
此章節首先介紹六子棋，接著介紹 NCTU6 相關的技術，包含搜
尋與評估函數。之後則是 JL 概念與相關技術，以及選點方法。 
2.1.  六子棋 
吳毅成教授在 2005 年 9 月於第十一屆電腦賽局發展學術研討會
(ACG 11)的發表了遊戲六子棋[13][15][17]。六子棋使用十九路棋盤，
先手持黑，第一手下一子，接著雙方輪流各下兩子，先連成六子或六
子以上者為勝。如下滿期盤後仍未分出勝負，則判和局。由上述可知
規則相比於五子棋簡單，由於五子棋黑方有許多禁手。 
六子棋具有遊戲公平的特性，以五子棋而言，無論何方下子後，
盤面中黑子數目一定大於等於白子。相對於五子棋，無論黑白雙方下
子完後，剛下子完後的一方必定比對方多一顆子，具備潛在的公平性
的特質。 
在 [15][17] 提 及 ， 迫 著 (Threat) 是 贏 得 六 子 棋 遊 戲 的 關 鍵 ( 像
Gomoku[2][3]跟  Renju[10])。迫著的定義是：若我方有 t 個迫著，則
對方必須要下 t 顆子，用以避免我方下一步直接獲勝。圖  2(a)與(b)
為單迫著及雙迫，分別指的是對方至少要下一、兩子在特定的位置，
4 
才能避免我方獲勝。由於六子棋一次只能下兩子，則當有三迫著(圖 
2(c)）發生時，若對方之前沒有迫著，則此盤面為我方下一手即可取
勝。 
(a)                                                  (b) 
                    (c) 
圖  2  迫著示意圖  (a)  單迫著  (b)  雙迫著    (c)  三迫著 
2.2.  NCTU6 
NCTU6 是我們團隊所發展的六子棋程式，主要使用迫著空間搜
尋與 ABS。NCTU6 透過連續的迫著找出必勝敗，當無法找出必勝敗
時，則會使用 ABS 來找出推薦的一步。另外在先前的研究中，提出
相關區域(Relevance zone;  簡稱 RZ)與時序差異學習(Temporal 
Difference Learning)等技術用以提升程式。 
5 
2.2.1. 迫著空間搜尋 
迫著空間搜尋是由攻擊方的角度，尋找是否可以透過連續的迫著
步而獲勝。由於防守方的可選步被迫著步大幅限制，因此迫著空間搜
尋可以有效地搜尋較深入的必勝步。於六子棋中，迫著空間搜尋可分
成以下三種[3][21]：雙迫著追殺、單迫著追殺、無迫著追殺。 
雙迫著追殺，指攻擊方從搜尋的盤面開始，每次攻擊方下完皆有
兩個或兩個以上的迫著。由於攻擊方每次下完都會有兩個迫著，因此
防守方的兩子一定都要用以阻擋這個兩個迫著，防守方的可選步相當
地少，搜尋時可以大幅地減少搜尋複雜度。圖  3(b)為雙迫著追殺範
例，可以見到黑方透過一連串的雙迫著，最後下出三迫著而獲勝。 
單迫著追殺，指攻擊方從搜尋盤面開始，每次攻擊方下完皆有一
個或一個以上的迫著。因此使用此技巧能縮小需要搜尋的區域，降低
搜尋複雜度。 
無迫著追殺，指攻擊方從搜尋盤面開始，於不限定是否有迫著步
的情況下搜尋是否有必勝法。由於不限定攻擊方下迫著步，使得防守
方可選步有相當多的變化，搜尋無迫著追殺所花費的時間較其他兩者
長許多。 
6 
2.2.2. 相關區域 
我們於先前的研究中[17][21]，提出相關區域(RZ)的概念與技術。
相關區域(簡稱 RZ)主要的概念為，在某些盤面中，如果不下在區域
中則必敗。用於在程式搜尋中快速的刪除候選步。RZ 的產生方法，
為防守方一手不下子，如果攻擊方可以透過迫著空間搜尋獲勝，則可
進而計算出此盤面的 RZ。換而言知，防守方如果下在 RZ 之外，則
攻擊方可以依照迫著空間搜尋的方式獲勝。如圖  3  (a)中，白棋不下
兩子，則黑可以透過迫著空間搜尋獲得勝利(圖  3 (b))。由此可以進而
計算出此盤面的 RZ(灰色區域)，如果白子不下在灰色區域則必敗。
透過 RZ 可以快速排除一些必敗的候選步，進而降低搜尋數中分枝的
數量，因此對大幅裁減搜尋樹是有效的方法。 
(a)                                                         (b) 
圖  3: RZ 範例盤面(灰色區域為 RZ) (a)  搜尋前盤面  (b)  迫著空間搜
尋後盤面 
7 
2.2.3. Minimax 搜尋與 Alpha-beta 搜尋 
Minimax 搜尋是兩人零和遊戲的基本搜尋模式，搜尋樹中有兩種
節點(node)，一種為 max 節點，一種為 min 節點。 Max 節點會選擇
所有子節點中，分數最大(對我方最有利)的節點。Min 節點則會模擬
對手的角度，選擇子節點中分數最小(對我方最不利)的節點。以此方
式模擬雙方下最好步後所到達盤面的分數。使用上通常會決定搜尋的
深度限制，於深度最大的節點評估一個分數。評估方式是利用盤面上
的資訊，評估盤面情勢後給予該節點一個量化的分數，分數越高代表
對我方越有利。 
Alpha-beta 搜尋(ABS)是在 Minimax 搜尋中加上 alpha-beta 砍
枝，原本的 minimax search，不會影響搜尋的結果(分數以及路徑)，
有許多路徑可以不必搜尋(cut-off)。關於 ABS 的複雜度，若 b 為搜
尋樹寬度，d 為搜尋樹高度，在最佳的情況下，可以將 Minimax 搜尋
的時間複雜度從 O(𝑏𝑑)改良至 O(𝑏𝑑/2)) [12]，在一般狀況下，效率都
會大幅提升。 
2.2.4. 兩種評估函數 
這裡要介紹 ABS 中在兩種地方需要做評估，分別是評估走步順序
(Move  Ordering  Evaluation  ;簡稱 MO  Evaluation)及評估葉節點(Leaf 
8 
Evaluation)。評估走步順序的定義是：用於 ABS 展點時，評估子節點
之間的優劣，並且將子節點照評估走步順序所得的分數排列。由於六
子棋每手最多有約六萬種下法，考量時間因素，程式中每個節點在展
點時，目前程式設計為評估兩百個至五百個子節點的走步順序，並且
僅展開前十五名。評估走步順序品質的重要性在於，如何將理想步排
入前十五名當中，因為如果理想步不在前十五名中，則在 ABS 中不
管評估葉節點如何精準，都沒有機會選中理想步。而評估葉節點的定
義是：用於 ABS 中葉節點的評估，用以評估一個表示盤面的優劣程
度的分數，此分數用於 ABS 中的 minimax 值。 
評估走步順序因為使用的次數多，需要快速的計算，所以計算的
特徵較少，例如雙方線段的增減(如我方增加一活二；對方少一死三)
與我方的群組攻擊。評估葉節點用在葉節點的評分，由於精準度對於
整體搜尋的品質有很大的影響，因此計算的特徵比較多，像是雙方線
段的數量、位置，雙方群組攻擊的判斷以及一些特殊狀況的判斷。群
組攻擊指的是當線段聚集在一起時，會產生相互影響，使得攻擊更為
有利。舉例而言，如圖 4，黑方有三條以上有威力的線段(1 死四威脅
如紅線、2 活二如藍線)；白方有四條以上有威力的線段(4 活二如藍
線)。在此圖中，雙方都有群組攻擊，顯示雙方競爭激烈；實際上，
高段棋士的評估是：雖然白有群組攻擊，但是白方需要用一子擋住死
9 
四威脅，剩餘一子無法同時防手兩條活二線段，因此黑方還有後續攻
擊，局面黑優勢。這就是屬於一種特殊狀況的判斷。 
圖 4: 特殊狀況判斷範例盤面 
評估葉節點根據上面的特徵，評估葉節點的分數與狀態。分數用
於 ABS 中的葉節點評估值。最早分數的算法是由啟發式(heuristics)
方式給定，後來在[16]改採用時序差異學習所訓練出來的分數評估。
然而，目前的分數用於子節點間相對準確，父子節點間較不精確。這
是由於六子棋一次下兩子的遊戲特性，導致分數於前後手之間並非相
對平衡、均勻分布。相對平衡指當我方下完所評估分數，與對方回手
後的分數應該相當。例如當我方下完兩子後評估得 0.8，輪對手下子
後，由對手的角度評估得 0.2。但目前我們的程式分數設計，會有當
10 
我方下完兩子後評估得 0.8，輪對手下子後，由對手的角度評估得 0.7
的問題。而此特性在需要比較我方下完與敵方下完的盤面時，使用分
數做為比較基準會產生問題。過去的程式為了解決這問題，儘量讓葉
節點都是在對方下完後評估。然為了需要比較前後手之間的分數時，
我們使用狀態來評估。 
狀態是一個用來了解盤面優劣的評估值，包含了 13 種不同的狀
態。黑棋勝利的盤面狀態為「B:W」；「B:4」代表此盤面對黑方非常
有利，而「B3」、「B2」、「B1」代表黑棋不同的有利程度，數字越高
表示對黑方優勢越大。對白方而言，「W:W」、「W4」、「W3」、「W2」
與「W1」則代表著對白方不同的有利程度。對雙方玩家都沒有優勢
的盤面，有三種狀態來表示。「Stable」表示之後的移動並不會使分數
有明顯的變化。「unstable1」跟「unstable2」則表示之後分數會有劇
烈的變化。 
值得注意的是，由於分數與狀態兩者計算方式不同，有時也會發
生不一致的現象，如分數是對我方優勢，但狀態卻是對敵方優勢。 
2.2.5. 排除著手 
另一個程式中重要的功能，是可以給 NCTU6 一個集合的排除著手。
NCTU6 在搜尋時會排除掉這些下法，用此方法可以讓 NCTU6 推薦
11 
不在排除著手中的最好步。另外，當 NCTU6 找不到任何不在排除著
手中的非必敗步，則此盤面被當成在排除著手的情況下必敗。這個做
法使得 NCTU6 可以應用在 JL 運算如下節所述。 
2.3.  工作層級證明樹搜尋 
這章節將會介紹工作層級證明樹搜尋(JL Proof-Number Search ;簡
稱 JL-PNS)。簡單的描述 JL 運算模式的行為，接著會介紹 JL-PNS 以
及 NCTU6 如何應用在 JL-PNS 上。最後介紹在 JL-PNS 樹中如何評估
棋步。 
2.3.1. Job-Level  運算模式 
JL  運算模式由兩個部份所組成：客戶端與 JL 系統。客戶端(Client)
負責動態產生工作，而 JL 系統負責計算客戶端產生的工作。JL 系統
包含一群工作者(worker)，工作者負責完成工作。以用在搜尋演算法
時為例，客戶端維護遊戲樹，並且選擇要產生下一步以及評估分數的
盤面（遊戲樹中的其中一個點），包裝成工作。當有閒置的工作者時，
JL 系統會通知客戶端，此時客戶端送出等待被執行的工作。客戶端
在此是一個被動的角色。當工作者完成該盤面的計算，通過 JL 系統
將結果傳回給客戶端。 
12 
